/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/hybrid-evaluation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Returns the health status of the Ultimate Hybrid Evaluation service.
         *     This endpoint can be used to check if the service is running and
         *     whether it's operating in mock mode.
         *
         */
        get: operations["getHybridEvaluationHealth"];
        put?: never;
        /**
         * Run Ultimate Hybrid Evaluation
         * @description Evaluates a GitHub repository using the Ultimate Hybrid system that combines
         *     AI-powered file selection with fingerprinting and intelligent caching.
         *
         *     This endpoint performs comprehensive repository analysis including:
         *     - Repository validation and file extraction
         *     - AI-powered file selection using qwen/qwen-2.5-coder-32b-instruct
         *     - Rubric-based evaluation with detailed scoring
         *     - A/B testing comparison with current system
         *
         */
        post: operations["runHybridEvaluation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HybridEvaluationRequest: {
            /**
             * Format: uri
             * @description GitHub repository URL to evaluate
             * @example https://github.com/user/data-engineering-project
             */
            repoUrl: string;
            /**
             * @description Course identifier for evaluation context
             * @example data-engineering
             * @enum {string}
             */
            courseId: "data-engineering" | "machine-learning" | "llm-zoomcamp" | "mlops" | "stock-markets";
            /**
             * @description User identifier (optional, defaults to 'demo-user')
             * @example user_123
             */
            userId?: string;
        };
        HybridEvaluationResponse: {
            /**
             * @description Evaluation method used
             * @example Ultimate Hybrid
             */
            method: string;
            /**
             * @description Specific tier/approach used in evaluation
             * @example AI + Fingerprinting
             * @enum {string}
             */
            tierUsed: "AI + Fingerprinting + Caching" | "AI + Fingerprinting" | "AI Only" | "Fingerprinting Only" | "Cache Hit";
            /**
             * @description List of files selected for evaluation
             * @example [
             *       "README.md",
             *       "dbt/dbt_project.yml",
             *       "terraform/main.tf"
             *     ]
             */
            selectedFiles: string[];
            /**
             * Format: float
             * @description Confidence score for the file selection (0-1)
             * @example 0.92
             */
            confidence: number;
            metadata: components["schemas"]["EvaluationMetadata"];
            /** @description A/B testing comparison results (when enabled) */
            comparison?: components["schemas"]["ComparisonResult"];
        };
        EvaluationMetadata: {
            /**
             * @description Number of files selected
             * @example 4
             */
            fileCount: number;
            /**
             * @description Processing time in milliseconds
             * @example 1250
             */
            processingTime: number;
            /**
             * @description AI model used for file selection
             * @example qwen/qwen-2.5-coder-32b-instruct
             */
            aiModel?: string;
            fingerprinting?: components["schemas"]["FingerprintingResult"];
        };
        FingerprintingResult: {
            /**
             * @description Whether fingerprinting patterns were detected
             * @example true
             */
            detected?: boolean;
            /**
             * @description Detected technology patterns
             * @example [
             *       "dbt",
             *       "terraform",
             *       "python"
             *     ]
             */
            patterns?: string[];
            /**
             * Format: float
             * @description Fingerprinting confidence score
             * @example 0.88
             */
            confidence?: number;
        };
        ComparisonResult: {
            /**
             * @description Whether A/B testing comparison was enabled
             * @example true
             */
            enabled: boolean;
            /**
             * @description Files selected by hybrid method
             * @example [
             *       "README.md",
             *       "dbt/dbt_project.yml",
             *       "terraform/main.tf"
             *     ]
             */
            hybridFiles: string[];
            /**
             * @description Files selected by current method
             * @example [
             *       "README.md",
             *       "main.py",
             *       "config.yaml"
             *     ]
             */
            currentFiles: string[];
            /**
             * @description Files selected by both methods
             * @example [
             *       "README.md"
             *     ]
             */
            overlap: string[];
            /**
             * @description Files only selected by hybrid method
             * @example [
             *       "dbt/dbt_project.yml",
             *       "terraform/main.tf"
             *     ]
             */
            uniqueToHybrid: string[];
            /**
             * @description Files only selected by current method
             * @example [
             *       "main.py",
             *       "config.yaml"
             *     ]
             */
            uniqueToCurrent: string[];
        };
        HealthResponse: {
            /**
             * @description Service status
             * @example ok
             * @enum {string}
             */
            status: "ok" | "error";
            /**
             * @description Service name
             * @example Ultimate Hybrid Evaluation API
             */
            service: string;
            /**
             * @description Whether the service is running in mock mode
             * @example false
             */
            mockMode: boolean;
            /**
             * Format: date-time
             * @description Current server timestamp
             * @example 2024-01-15T10:30:00.000Z
             */
            timestamp: string;
        };
        ErrorResponse: {
            /**
             * @description Error message
             * @example Repository URL and course ID are required
             */
            error: string;
            /**
             * @description Additional error details
             * @example URL must be a valid GitHub repository URL
             */
            details?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHybridEvaluationHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    runHybridEvaluation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HybridEvaluationRequest"];
            };
        };
        responses: {
            /** @description Evaluation completed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HybridEvaluationResponse"];
                };
            };
            /** @description Bad request - Invalid input parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized - Invalid or missing authentication */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Rate limit exceeded */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
